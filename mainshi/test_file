hello jeellee!hello jeellee!hello jeellee!aaaaaaaaaaaabbbbbbbbbbbaaaaaaaaaaaa
bbbbbbbbbbb



1. 描述一下http

2. 讲一下tcp和udp的不同， 以及之间的优缺点
tcp是可靠连接， 需要建立与客户端的连接， 然后进行通信，并且是双向的（对于http协议还需要客户端先发消息， 服务器才回应）
udp是不可靠连接， 不需要建立连接（无连接， 只需要知道对方ip和端口即可发送数据），它不保证数据是否能到达

udp的优点是比tcp快


tcp， udp是传输层协议， 主要解决数据如何在网络中传输

http是HTTP是应用层协议，主要解决如何包装数据， 是传输html的协议， 步骤：
步骤一： 浏览器发送http请求（get或者post）
步骤二： 服务器生成html文档或数据
步骤二： 服务器返回数据给客户端

数据传输还要涉及到7层模型
7	应用层	例如HTTP、SMTP、SNMP、FTP、Telnet、SIP、SSH、NFS、RTSP、XMPP、Whois、ENRP
6	表示层	例如XDR、ASN.1、SMB、AFP、NCP
5	会话层	例如ASAP、TLS、SSH、ISO 8327 / CCITT X.225、RPC、NetBIOS、ASP、Winsock、BSD sockets
4	传输层	例如TCP、UDP、RTP、SCTP、SPX、ATP、IL
3	网络层	例如IP、ICMP、IGMP、IPX、BGP、OSPF、RIP、IGRP、EIGRP、ARP、RARP、 X.25
2	数据链路层	例如以太网、令牌环、HDLC、帧中继、ISDN、ATM、IEEE 802.11、FDDI、PPP
1	物理层	例如线路、无线电、光纤、信鸽

socket则是对TCP/IP协议的封装和应用, Socket本身不算是协议，它只是提供了一个针对TCP或者UDP编程的接口。

非异常断开？
客户端发送exit， 关闭连接

客户端异常断开， 服务器如何判断？
服务器实现一个心跳检测，一定时间内未收到自定义的心跳包则标记为已断开
存储连接的时间， 判断是否超时， 超时关闭

3. 什么是TCP连接的三次握手

　　第一次握手：客户端发送syn包(syn=j)到服务器，并进入SYN_SEND状态，等待服务器确认;

　　第二次握手：服务器收到syn包，必须确认客户的SYN(ack=j+1)，同时自己也发送一个SYN包(syn=k)，即SYN+ACK包，此时服务器进入SYN_RECV状态;

　　第三次握手：客户端收到服务器的SYN+ACK包，向服务器发送确认包ACK(ack=k+1)，此包发送完毕，客户端和服务器进入ESTABLISHED状态，完成三次握手。

3. 讲一下进程和线程的区别，以及各自优缺点， 讲一下协程以及协程和线程的优缺点
线程是最小的执行单元， 进程至少由一个线程组成
多线程共享内存，存在资源抢夺，所以存在线程安全问题， 需要加线程锁

多进程最大优点是稳定性高， 一个进程奔溃， 不会影响其他进程（主进程奔溃，所有子进程也会奔溃， 但主进程一般负责分配任务， 挂掉的概率很低）
多进程缺点是创建进程代价大， 操作系统能能同时运行的进程数是有限的（太多， 调度都是问题）

多线程优点是比进程稍微快点
多线程致命缺点是一个线程挂掉，可能造成整个进程奔溃， 因为它们是共享内存的

python有GIL（全局线程锁）， 可以使用多线程， 但是同时只有一个线程起作用， 不能利用多核优势


协程， 看上去像子程序（一级一级调用的函数）， 但是在执行过程中可以中断， 去执行其他子程序， 在适当的时候又返回来接着执行原来的程序。

在一个程序中中断， 去执行其他程序， 并不是函数调用， 有点像CPU中断

与多线程比：
执行效率高， 因为没有线程切换的开销
不需要多线程的锁机制， 因为只有一个线程， 对于共享资源，只需要判断状态就行



4. 讲一下面向对象（OOP）在python中和在java中的不同
面向对象的三大特点： 封装， 继承， 多态
封装不用讲了
继承， 继承父类
多态， 有了继承，才有多态
    当我们需要传入Dog， Cat时， 只需要传入都继承了Animal的类即可
    子类可以新增自己的方法， 也可以覆盖父类的方法


最大的不同：
    python可面向对象编程，可以不按照面向对象编程。
    java就必须面向对象编程了，必须建个类

    java不支持多继承，python支持









