# -*- coding: utf-8 -*-

"""
RESTFul:
RESTful架构，目前是比较流行的一种互联网软件架构。REST，即Representational State Transfer的缩写。


REST的六个特性：
客户端-服务器: 客户端和服务器之间隔离，服务器提供服务，客户端进行消费。
无状态: 从客户端到服务器的每个请求都必须包含理解请求所必需的信息。换句话说， 服务器不会存储客户端上一次请求的信息用来给下一次使用。
可缓存: 服务器必须明示客户端请求能否缓存。
分层系统: 客户端和服务器之间的通信应该以一种标准的方式，就是中间层代替服务器做出响应的时候，客户端不需要做任何变动。
统一的接口: 服务器和客户端的通信方法必须是统一的。
按需编码: 服务器可以提供可执行代码或脚本，为客户端在它们的环境中执行。这个约束是唯一一个是可选的。


RESTful web services 概念的核心就是“资源”。
资源可以用 URI 来表示。
客户端使用 HTTP 协议定义的方法来发送请求到这些 URIs，当然可能会导致这些被访问的”资源“状态的改变。

说白点就是网站即软件，再白点就是一个服务软件支持http的四种方法：
GET用来获取资源(返回html页面)，POST用来新建资源、更新资源(不用返回html页面, 只有数据)，PUT用来更新资源，DELETE用来删除资源
HTTP 标准的方法有如下:
==========  =====================  ==================================
HTTP 方法   行为                   示例
==========  =====================  ==================================
GET         获取资源的信息         http://example.com/api/orders
GET         获取某个特定资源的信息  http://example.com/api/orders/123
POST        创建新资源             http://example.com/api/orders
PUT         更新资源               http://example.com/api/orders/123
DELETE      删除资源               http://example.com/api/orders/123
==========  ====================== ==================================

REST 设计不需要特定的数据格式。在请求中数据可以以 JSON 形式, 或者有时候作为 url 中查询参数项。
"""
def get_users():
    return {'users': {}}

def get_user(user_id):
    return {'user': {}}

def add_user():
    return {'user': {}}












